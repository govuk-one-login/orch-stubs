AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Authentication, IPV and SPOT stubs

#      Tags:
#        Service: Authentication, IPV and SPOT stubs
#        Source: govuk-one-login/orch-stubs
#        Owner: di-orchestration@digital.cabinet-office.gov.uk

Parameters:
  Environment:
    Type: String
    Description: The name of the environment to deploy to
    Default: none
  CodeSigningConfigArn:
    Type: String
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: none
  PermissionsBoundary:
    Type: String
    Description: The ARN of the permissions boundary to apply when creating IAM roles
    Default: none

Conditions:
  UseCodeSigning: !Not [!Equals [none, !Ref CodeSigningConfigArn]]
  UsePermissionsBoundary: !Not [!Equals [none, !Ref PermissionsBoundary]]
  IsNotProduction: !Not [!Equals [!Ref Environment, production]]

Globals:
  Function:
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue

Resources:
  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-UserIdentity
      KeySchema:
        - AttributeName: UserIdentityId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: UserIdentityId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Name
          Value: UserIdentity

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-ApiGateway
      StageName: Live
      AlwaysDeploy: true

  IPVAuthorizeLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src/main/ipv-stub/ipv-authorize.handler
      LoggingConfig:
        LogGroup: !Ref IPVAuthorizeLambdaLogGroup
      Runtime: nodejs20.x
      Architectures:
        - arm64
      Environment:
        Variables:
          ENVIRONMENT: !Sub ${Environment}
          IPV_AUTHORIZE_PRIVATE_ENCRYPTION_KEY: "{{resolve:secretsmanager:/orch-stubs/ipv-private-encryption-key:SecretString}}"
          IPV_AUTHORIZE_PUBLIC_SIGNING_KEY: ""
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /authorize
            Method: get
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /authorize
            Method: post
      Policies:
        - !Ref UserIdentityTableWriteAccessPolicy
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/main/ipv-stub/ipv-authorize.ts
        Minify: true
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
        Sourcemap: true
        Target: node20

  IPVAuthorizeLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/orch-stubs/lambda/${Environment}-ipv-authorize-lambda
      RetentionInDays: 30

  IPVTokenLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src/main/ipv-stub/ipv-token.handler
      LoggingConfig:
        LogGroup: !Ref IPVTokenLambdaLogGroup
      Runtime: nodejs20.x
      Architectures:
        - arm64
      Environment:
        Variables:
          ENVIRONMENT: !Sub ${Environment}
          IPV_TOKEN_PUBLIC_SIGNING_KEY: "{{resolve:ssm:/orch-stubs/ipv-public-signing-key}}"
          IPV_AUDIENCE: !If
            - IsNotProduction
            - !Sub https://identity.${Environment}.account.gov.uk/
            - https://identity.account.gov.uk/
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /token
            Method: get
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /token
            Method: post
      Policies:
        - !Ref UserIdentityTableReadAccessPolicy
        - !Ref UserIdentityTableWriteAccessPolicy
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/main/ipv-stub/ipv-token.ts
        Minify: true
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
        Sourcemap: true
        Target: node20

  IPVTokenLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/orch-stubs/lambda/${Environment}-ipv-token-lambda
      RetentionInDays: 30

  IPVUserIdentityLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src/main/ipv-stub/ipv-user-identity.handler
      LoggingConfig:
        LogGroup: !Ref IPVUserIdentityLambdaLogGroup
      Runtime: nodejs20.x
      Architectures:
        - arm64
      Environment:
        Variables:
          ENVIRONMENT: !Sub ${Environment}
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user-identity
            Method: get
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user-identity
            Method: post
      Policies:
        - !Ref UserIdentityTableReadAccessPolicy
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/main/ipv-stub/ipv-user-identity.ts
        Minify: true
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
        Sourcemap: true
        Target: node20

  IPVUserIdentityLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/orch-stubs/lambda/${Environment}-ipv-user-identity-lambda
      RetentionInDays: 30

  UserIdentityTableReadAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowUserIdentityTableReadAccess
            Effect: Allow
            Action:
              - dynamodb:DescribeTable
              - dynamodb:Get*
            Resource: !GetAtt DynamoDB.Arn

  UserIdentityTableWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowUserIdentityTableWriteAccess
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: !GetAtt DynamoDB.Arn